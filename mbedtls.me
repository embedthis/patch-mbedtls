/*
    mbedtls.me - MbedTLS MakeMe file
 */

Me.load({
    targets: {

        'pak-postcache': {
            depends: [ 'patch', 'combo', 'fixup' ],
        },

        patch: {
            action: `
                trace('Patch', 'Apply patches to core source files')
                for each (f in Path('.').files('*.patch')) {
                    sh('patch -N -p1 -s < ' + f)
                }
            `
        },

        fixup: {
            action: `
                trace('Patch', 'Apply patch to dist/*')
                sh('./fixup')
            `
        }

        makepatch: {
            /* Format patch from the embedthis branch to development */
            shell: `git diff development..embedthis include library >../patch-mbedtls/embedthis.patch`
        },

        combo: {
            depends: [ 'mbedtls.h', 'mbedtls.c' ],
        },

        'mbedtls.h': {
            from: [
                'library/common.h',
                'include/mbedtls/config.h',
                'include/mbedtls/check_config.h',
                'include/mbedtls/platform.h',
                'include/mbedtls/platform_time.h',
                'include/mbedtls/platform_util.h',
                'include/mbedtls/threading.h',
                'include/mbedtls/bignum.h',
                'include/mbedtls/constant_time.h',
                'library/constant_time_internal.h',
                'include/mbedtls/net.h',
                'include/mbedtls/net_sockets.h',
                'include/mbedtls/dhm.h',
                'include/mbedtls/error.h',
                'include/mbedtls/md.h',
                'include/mbedtls/md_internal.h',
                'include/mbedtls/md5.h',
                'include/mbedtls/md2.h',
                'include/mbedtls/md4.h',
                'include/mbedtls/rsa.h',
                'include/mbedtls/rsa_internal.h',
                'include/mbedtls/asn1.h',
                'include/mbedtls/ecp.h',
                'include/mbedtls/ecdsa.h',
                'include/mbedtls/ecjpake.h',
                'include/mbedtls/pk.h',
                'include/mbedtls/pk_internal.h',
                'include/mbedtls/x509.h',
                'include/mbedtls/x509_crl.h',
                'include/mbedtls/x509_crt.h',
                'include/mbedtls/x509_csr.h',
                'include/mbedtls/cipher.h',
                'include/mbedtls/ssl_ciphersuites.h',
                'include/mbedtls/cipher_internal.h',
                'include/mbedtls/ecdh.h',
                'include/mbedtls/sha1.h',
                'include/mbedtls/sha256.h',
                'include/mbedtls/sha512.h',
                'include/mbedtls/aes.h',
                'include/mbedtls/aesni.h',
                'include/mbedtls/arc4.h',
                'include/mbedtls/base64.h',
                'include/mbedtls/bn_mul.h',
                'include/mbedtls/chacha20.h',
                'include/mbedtls/poly1305.h',
                'include/mbedtls/chachapoly.h',
                'include/mbedtls/camellia.h',
                'include/mbedtls/ctr_drbg.h',
                'include/mbedtls/des.h',
                'include/mbedtls/entropy.h',
                'include/mbedtls/entropy_poll.h',
                'include/mbedtls/havege.h',
                'include/mbedtls/memory_buffer_alloc.h',
                'include/mbedtls/padlock.h',
                'include/mbedtls/timing.h',
                'include/mbedtls/xtea.h',
                'include/mbedtls/ssl.h',
                'include/mbedtls/ssl_cookie.h',
                'include/mbedtls/ssl_internal.h',
                'include/mbedtls/ssl_cache.h',
                'include/mbedtls/ssl_ticket.h',
                'include/mbedtls/debug.h',
                'include/mbedtls/blowfish.h',
                'include/mbedtls/camellia.h',
                'include/mbedtls/ccm.h',
                'include/mbedtls/gcm.h',
                'include/mbedtls/pem.h',
                'include/mbedtls/asn1write.h',
                'include/mbedtls/hmac_drbg.h',
                'include/mbedtls/pkcs12.h',
                'include/mbedtls/pkcs11.h',
                'include/mbedtls/pkcs5.h',
                'include/mbedtls/oid.h',
                'include/mbedtls/ripemd160.h',
                'include/mbedtls/hkdf.h',
                'include/mbedtls/version.h',
            ],
            to:         'dist/mbedtls.h',
            append:     true,
            sort:       false,
            filter:     /^#include.*\"|^#include MBEDTLS_CONFIG_FILE/mg,
            header:     '/*\n *  ${settings.title} Library Header\n */\n\n#include "me.h"\n\n#if ME_COM_MBEDTLS\n\n#if defined(MBEDTLS_CONFIG_FILE)\n#include MBEDTLS_CONFIG_FILE\n#endif\n',
            divider:    true,
            footer:     '#endif /* ME_COM_MBEDTLS */'
        }, 
        'mbedtls.c': {
            from:       'library/*.c', 
            to:         'dist/mbedtls.c',
            append:     true,
            filter:     /^#inc.*mbedtls\/.*|^#include MBEDTLS_CONFIG_FILE|^#include.*common.h.*|^#include.*constant_time.*|^#include.*ecp_invasive.h.*|^#include.*library\/.*/mg,
            header:     '/*\n *  ${settings.title} Library Source\n */\n\n#include \"mbedtls.h\"\n\n#if ME_COM_MBEDTLS',
            divider:    true,
            dividerFile: 'undef.txt',
            footer:     '#endif /* ME_COM_MBEDTLS */',
            replace:    [[/FSb/g, 'FSb{U}'], [/test_input/g, 'test_input{U}'], [/test_output/g, 'test_output{U}'], [/test_data/g, 'test_data{U}']],
            postPerform: function (src, dest, options) {
                // let s = dest.readString()
                // dest.write(s)
            }
        }
    }
})
